package module.integracion.threads;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.log4j.Logger;

import com.pedidosya.reception.sdk.ApiClient;
import com.pedidosya.reception.sdk.clients.ProductsClient;
import com.pedidosya.reception.sdk.exceptions.ApiException;
import com.pedidosya.reception.sdk.models.Product;

import module.integracion.MantenedorPrecios;
import module.integracion.bd.PoolManager;
import module.integracion.dto.ProductosFasa;

/**
 * @author fernando
 *
 * Cada thread lee desde la BD la pagina de productos que debe procesar y manda a PEYA la creacion o actualizacion
 * 
 */
public class ProcesaMantencion extends Thread {

	private final ApiClient apiClient;
	private final String idServidor;
	private final Integer numThreads;
	private final Properties integracionProps;
	private final PoolManager poolManager;
	private final Integer numThread;
	private Logger logger = Logger.getLogger(getClass());

	private final String qry;
	private final String poolName;

	public ProcesaMantencion(ApiClient apiClient, String idServidor, Integer numThreads, Properties integracionProps,
			PoolManager poolManager, Integer numThread) {
		super();
		this.apiClient = apiClient;
		this.idServidor = idServidor;
		this.numThreads = numThreads;
		this.integracionProps = integracionProps;
		this.poolManager = poolManager;
		this.numThread = numThread;
		this.qry = String.format("{call %s }", integracionProps.getProperty("peya.actualizaPrecios.qry"));
		this.poolName = integracionProps.getProperty("poolName");
	}

	/**
	 *	Lee lista desde BD
	 *	envia a PEYA cada uno de los elementos de la lista
	 *
	 * Obs: Es posible modificar haciendo el proceso de envio a PEYA en vez de incluirlo en la lista 
	 *      si es mucha la memoria que se requiere para almacenar la lista 
	 */
	public void run() {
		// leer desde la base de datos e invocar al api peta para crear/actualizar
		// precio
		List<ProductosFasa> lista = readListaProductos(idServidor, numThread);
		if (lista != null && lista.size() > 0)
			for (ProductosFasa pf : lista) {
				send2Peya(pf);
			}

		// cuando termina el proceso
		MantenedorPrecios.decrementThreadsRunning();
	}

	/**
	 * @param idServidor2
	 * @param numThread2
	 * @return
	 * 
	 * Recupera desde la BD 
	 */
	private List<ProductosFasa> readListaProductos(String idServidor2, Integer numThread2) {
		Connection conn = null;
		CallableStatement stmt = null;
		ResultSet rs = null;
		List<ProductosFasa> result = null;
		try {
			List<? extends Object> parametros = Arrays.asList(idServidor, numThread);

			conn = poolManager.getConnection(poolName);
			logger.info("Acepto la conexion");
			stmt = conn.prepareCall(qry, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			stmt.registerOutParameter(1, java.sql.Types.REF_CURSOR);
			stmt.setObject(2, parametros.get(0));
			stmt.setObject(3, parametros.get(1));

			rs = stmt.executeQuery();
			int colCount = rs.getMetaData().getColumnCount();
			result = new ArrayList<ProductosFasa>();
			while (rs.next()) {
				List<Object> fila = new ArrayList<Object>();
				for (int i = 1; i <= colCount; i++)
					fila.add(rs.getObject(i));
				result.add(new ProductosFasa(fila));
			}
			rs.close();
			stmt.close();

		} catch (Exception e) {
			logger.error("process", e);
			liberaConexion(conn, stmt, rs);
			conn = null;
		} finally {
			if (conn != null) {
				poolManager.freeConnection(poolName, conn);
				conn = null;
			}
		}

		return result;
	}

	///////////////////////////////////////////////////////////////////////////
	public void liberaConexion(Connection conn, CallableStatement stmt, ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
			}
		}

		if (stmt != null) {
			try {
				stmt.close();
			} catch (SQLException e) {
			}
		}
		if (conn != null) {
			poolManager.resetConnection(poolName, conn);
			conn = null;
		}
	}

	/**
	 * @param pf
	 */
	///////////////////////////////////////////////////////////////////////////
	private void send2Peya(ProductosFasa pf) {
		try {
			// 
			logger.info(String.format("send2Peya: procesa producto leido desde bd: %s", pf.toString()));
			ProductsClient productsClient = apiClient.getProductsClient();
			
			switch (pf.getTipo()) {
			case 0:
				// modificar
				Product producto = modificaProducto(productsClient, pf.factoryProducto(), pf.getVendorId());
				break;
			case 1:
				// nuevo
				creaProducto(productsClient, pf.factoryProducto(), pf.getVendorId());
				break;
			case 2:
				// elimina
				eliminaProducto(productsClient, pf.factoryProducto(), pf.getVendorId());
			default:
				logger.error(String.format("send2Peya: TIPO entregado por SP (%d) no definido", pf.getTipo()));
			}
		} catch (Exception e) {
			;
		}
	}

	private Product modificaProducto(ProductsClient productsClient, Product producto, String vendorId) throws ApiException {
		// copia el ID PEYA a los datos a actualizar
		Product producto1 = (Product) productsClient.getByIntegrationCode(producto);
		producto.setId(producto1.getId());
		producto1 = (Product) productsClient.update(producto);
		return producto1;
	}

	private void creaProducto(ProductsClient productsClient, Product factoryProducto, String vendorId) {
		// TODO Auto-generated method stub
		
	}

	private void eliminaProducto(ProductsClient productsClient, Product factoryProducto, String vendorId) {
		// TODO Auto-generated method stub
		
	}

	//===============================================================================================
	// Getters y Setters
	//===============================================================================================
	public ApiClient getApiClient() {
		return apiClient;
	}

	public String getIdServidor() {
		return idServidor;
	}

	public Integer getNumThreads() {
		return numThreads;
	}

	public Properties getIntegracionProps() {
		return integracionProps;
	}

	public PoolManager getPoolManager() {
		return poolManager;
	}

	public Integer getNumThread() {
		return numThread;
	}

	public String getQry() {
		return qry;
	}

	public String getPoolName() {
		return poolName;
	}
}
